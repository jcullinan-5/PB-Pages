"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartlingBaseApi = void 0;
const merge_deep_1 = __importDefault(require("merge-deep"));
const default_user_agent_1 = __importDefault(require("default-user-agent"));
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const querystring_1 = require("querystring");
const index_1 = require("../exception/index");
const packageJson = require("../../package.json");
class SmartlingBaseApi {
    constructor(logger) {
        this.authApi = undefined;
        this.defaultClientLibId = packageJson.name;
        this.defaultClientVersion = packageJson.version;
        this.clientLibId = this.defaultClientLibId;
        this.clientLibVersion = this.defaultClientVersion;
        this.logger = logger;
        this.options = {};
    }
    setOptions(options) {
        this.options = options;
    }
    getClientLibId() {
        return this.clientLibId;
    }
    setClientLibId(clientLibId) {
        this.clientLibId = clientLibId;
    }
    getClientLibVersion() {
        return this.clientLibVersion;
    }
    setClientLibVersion(clientLibVersion) {
        this.clientLibVersion = clientLibVersion;
    }
    fetch(uri, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, cross_fetch_1.default)(uri, options);
        });
    }
    ua(clientId, clientVersion) {
        return (0, default_user_agent_1.default)(clientId, clientVersion);
    }
    alterRequestData(uri, opts) {
        return opts;
    }
    getDefaultHeaders(headers = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let defaultHeaders = {};
            if (this.hasOwnProperty("authApi") && undefined !== this.authApi) {
                const accessToken = yield this.authApi.getAccessToken();
                const tokenType = yield this.authApi.getTokenType();
                defaultHeaders = {
                    Authorization: `${tokenType} ${accessToken}`
                };
            }
            defaultHeaders["Content-Type"] = "application/json";
            defaultHeaders["User-Agent"] = this.ua(this.clientLibId, this.clientLibVersion);
            return (0, merge_deep_1.default)(defaultHeaders, headers);
        });
    }
    makeRequest(verb, uri, payload = null, returnRawResponseBody = false, headers = {}) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const opts = (0, merge_deep_1.default)({
                method: verb,
                headers: yield this.getDefaultHeaders(headers)
            }, this.options);
            if (verb.toLowerCase() !== "get" && payload) {
                opts.body = payload;
            }
            else if (payload) {
                uri = `${uri}?${(0, querystring_1.stringify)(payload)}`;
            }
            let response = yield this.fetch(uri, this.alterRequestData(uri, opts));
            if (response.status === 401) {
                this.logger.warn("Got unexpected 401 response code, trying to re-auth carefully...");
                if (this.hasOwnProperty("authApi") && this.authApi !== undefined) {
                    this.authApi.resetToken();
                }
                const defaultHeaders = yield this.getDefaultHeaders(headers);
                opts.headers.Authorization = defaultHeaders.Authorization;
                response = yield this.fetch(uri, this.alterRequestData(uri, opts));
            }
            if (response.status >= 400) {
                const responseText = yield response.text();
                throw new index_1.SmartlingException(`Request for ${uri} failed`, {
                    statusCode: response.status,
                    errorResponse: responseText,
                    requestId: response.headers.get("x-sl-requestid")
                });
            }
            if (returnRawResponseBody) {
                return response.text();
            }
            try {
                const textResponse = yield response.text();
                const jsonResponse = JSON.parse(textResponse, (key, value) => {
                    const dateProperties = [
                        "created",
                        "modified",
                        "updated",
                        "createdDate",
                        "modifiedDate",
                        "updatedDate",
                        "dueDate",
                        "actionTime",
                        "publishDate",
                        "lastModified"
                    ];
                    if (dateProperties.includes(key) && value) {
                        return new Date(value);
                    }
                    return value;
                });
                this.logger.debug(`Received code ${response.status}; content: ${JSON.stringify(jsonResponse, SmartlingBaseApi.sensitiveReplacer)}`);
                return ((_a = jsonResponse === null || jsonResponse === void 0 ? void 0 : jsonResponse.response) === null || _a === void 0 ? void 0 : _a.data) ? (_b = jsonResponse === null || jsonResponse === void 0 ? void 0 : jsonResponse.response) === null || _b === void 0 ? void 0 : _b.data : true;
            }
            catch (e) {
                this.logger.error(`Couldn't parse response json: ${e.toString()}`);
                throw new index_1.SmartlingException("Couldn't parse response json", {
                    statusCode: response.status,
                    errorResponse: yield response.text(),
                    requestId: response.headers.get("x-sl-requestid")
                });
            }
        });
    }
    static sensitiveReplacer(key, value) {
        const sensitiveProperties = [
            "userIdentifier",
            "userSecret",
            "accessToken",
            "refreshToken"
        ];
        if (sensitiveProperties.includes(key) && value && typeof value === "string") {
            return `${value.substring(0, 10)}xxxxx`;
        }
        return value;
    }
}
exports.SmartlingBaseApi = SmartlingBaseApi;
//# sourceMappingURL=index.js.map