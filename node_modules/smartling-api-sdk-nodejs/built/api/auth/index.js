"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartlingAuthApi = void 0;
const index_1 = require("../base/index");
const index_2 = require("../exception/index");
class SmartlingAuthApi extends index_1.SmartlingBaseApi {
    constructor(smartlingApiBaseUrl, userIdentifier, tokenSecret, logger) {
        super(logger);
        this.ttlCorrectionSec = 10;
        this.userIdentifier = userIdentifier;
        this.tokenSecret = tokenSecret;
        this.entrypoint = `${smartlingApiBaseUrl}/auth-api/v2`;
        this.resetToken();
    }
    authenticate() {
        return __awaiter(this, void 0, void 0, function* () {
            this.resetRequestTimeStamp();
            return yield this.makeRequest("post", `${this.entrypoint}/authenticate`, JSON.stringify({
                userIdentifier: this.userIdentifier,
                userSecret: this.tokenSecret
            }));
        });
    }
    refreshToken() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.tokenExists() && this.tokenCanBeRenewed()) {
                this.resetRequestTimeStamp();
                this.logger.debug(`Refresh token with: ${JSON.stringify(this.response, index_1.SmartlingBaseApi.sensitiveReplacer)}`);
                return yield this.makeRequest("post", `${this.entrypoint}/authenticate/refresh`, JSON.stringify({
                    refreshToken: this.response.refreshToken
                }));
            }
            this.logger.debug(`Can't refresh, doing re-auth with: ${JSON.stringify(this.response)}`);
            return yield this.authenticate();
        });
    }
    resetRequestTimeStamp() {
        this.requestTimestamp = this.time();
    }
    tokenExists() {
        return this.response !== null && this.response.hasOwnProperty("accessToken");
    }
    tokenExpired() {
        if (!this.tokenExists()) {
            return false;
        }
        const tokenExpirationTime = (this.requestTimestamp + this.response.expiresIn)
            - this.ttlCorrectionSec;
        return this.time() > tokenExpirationTime;
    }
    tokenCanBeRenewed() {
        if (!this.tokenExists()) {
            return false;
        }
        const refreshTokenExpirationTime = (this.requestTimestamp + this.response.refreshExpiresIn)
            - this.ttlCorrectionSec;
        return this.time() < refreshTokenExpirationTime;
    }
    getAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.tokenExpired()) {
                    this.logger.debug("Token expired. Refreshing...");
                    this.response = yield this.refreshToken();
                }
                if (!this.tokenExists()) {
                    this.logger.debug("No token available. Authenticating...");
                    this.response = yield this.authenticate();
                }
                return this.response.accessToken;
            }
            catch (e) {
                this.logger.debug(`Request failed. Got: ${e.payload}`);
                this.logger.debug("Token refresh or authentication failed. Final attempt to retrieve access token.");
                try {
                    this.response = yield this.authenticate();
                    return this.response.accessToken;
                }
                catch (error) {
                    throw new index_2.SmartlingException("Failed to get access token", error.payload, error);
                }
            }
        });
    }
    getTokenType() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.tokenExists()) {
                    this.logger.debug("Requested tokenType but no successful authenticate response received yet. Authenticating...");
                    this.response = yield this.authenticate();
                }
                return this.response.tokenType;
            }
            catch (e) {
                this.logger.debug(`Request failed. Got: ${e.payload}`);
                throw new index_2.SmartlingException("Failed to get token type", e.payload, e);
            }
        });
    }
    resetToken() {
        this.requestTimestamp = 0;
        this.response = null;
    }
    time() {
        return Math.floor(Date.now() / 1000);
    }
}
exports.SmartlingAuthApi = SmartlingAuthApi;
//# sourceMappingURL=index.js.map