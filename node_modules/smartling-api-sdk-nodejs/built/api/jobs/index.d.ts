import { SmartlingBaseApi } from "../base/index";
import { SmartlingAuthApi } from "../auth/index";
import { Logger } from "../logger";
import { CreateJobParameters } from "./params/create-job-parameters";
import { ListJobFilesParameters } from "./params/list-job-files-parameters";
import { ListJobsParameters } from "./params/list-jobs-parameters";
import { RemoveFileParameters } from "./params/remove-file-parameters";
import { FileProgressParameters } from "./params/file-progress-parameters";
import { JobDto } from "./dto/job-dto";
import { JobDetailsDto } from "./dto/job-details-dto";
import { SmartlingListResponse } from "../http/smartling-list-response";
import { BaseJobDto } from "./dto/base-job-dto";
import { FileProgressDto } from "./dto/file-progress-dto";
import { RemovedFileDto } from "./dto/removed-file-dto";
import { JobProgressDto } from "./dto/job-progress-dto";
import { JobProgressParameters } from "./params/job-progress-parameters";
import { CancelJobParameters } from "./params/cancel-job-parameters";
import { CloseJobParameters } from "./params/close-job-parameters";
import { SearchJobsParameters } from "./params/search-jobs-parameters";
import { FullSourceFileDto } from "./dto/full-source-file-dto";
export declare class SmartlingJobsApi extends SmartlingBaseApi {
    constructor(smartlingApiBaseUrl: string, authApi: SmartlingAuthApi, logger: Logger);
    createJob(projectId: string, params: CreateJobParameters): Promise<JobDto>;
    getJob(projectId: string, translationJobUid: string): Promise<JobDetailsDto>;
    getJobFiles(projectId: string, translationJobUid: string, params: ListJobFilesParameters): Promise<SmartlingListResponse<FullSourceFileDto>>;
    listJobs(projectId: string, params: ListJobsParameters): Promise<SmartlingListResponse<BaseJobDto>>;
    searchJobs(projectId: string, params: SearchJobsParameters): Promise<SmartlingListResponse<BaseJobDto>>;
    removeFileFromJob(projectId: string, translationJobUid: string, params: RemoveFileParameters): Promise<RemovedFileDto>;
    getJobProgress(projectId: string, translationJobUid: string, params: JobProgressParameters): Promise<JobProgressDto>;
    getJobFileProgress(projectId: string, translationJobUid: string, params: FileProgressParameters): Promise<FileProgressDto>;
    cancelJob(projectId: string, translationJobUid: string, params: CancelJobParameters): Promise<void>;
    closeJob(projectId: string, translationJobUid: string, params: CloseJobParameters): Promise<void>;
}
