"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartlingJobBatchesApi = void 0;
const form_data_1 = __importDefault(require("form-data"));
const index_1 = require("../base/index");
class SmartlingJobBatchesApi extends index_1.SmartlingBaseApi {
    constructor(smartlingApiBaseUrl, authApi, logger) {
        super(logger);
        this.authApi = authApi;
        this.entrypoint = `${smartlingApiBaseUrl}/job-batches-api/v2/projects`;
    }
    alterRequestData(uri, opts) {
        if (uri.match(/job-batches-api\/.*\/projects\/.*\/batches\/.*\/file$/g)) {
            const formData = new form_data_1.default();
            Object.keys(opts.body).forEach((key) => {
                if (Array.isArray(opts.body[key])) {
                    opts.body[key].forEach((value) => {
                        formData.append(`${key}[]`, value);
                    });
                }
                else {
                    formData.append(key, opts.body[key]);
                }
            });
            opts.headers["Content-Type"] = formData.getHeaders()["content-type"];
            opts.body = formData;
        }
        return opts;
    }
    createBatch(projectId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("post", `${this.entrypoint}/${projectId}/batches`, JSON.stringify(params.export()));
        });
    }
    registerBatchFile(projectId, batchUid, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("put", `${this.entrypoint}/${projectId}/batches/${batchUid}`, JSON.stringify(params.export()));
        });
    }
    cancelBatchFile(projectId, batchUid, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("put", `${this.entrypoint}/${projectId}/batches/${batchUid}`, JSON.stringify(params.export()));
        });
    }
    uploadBatchFile(projectId, batchUid, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("post", `${this.entrypoint}/${projectId}/batches/${batchUid}/file`, params.export());
        });
    }
    getBatchStatus(projectId, batchUid) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("get", `${this.entrypoint}/${projectId}/batches/${batchUid}`);
        });
    }
}
exports.SmartlingJobBatchesApi = SmartlingJobBatchesApi;
//# sourceMappingURL=index.js.map