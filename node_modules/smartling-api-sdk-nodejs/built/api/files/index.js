"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartlingFilesApi = void 0;
const form_data_1 = __importDefault(require("form-data"));
const index_1 = require("../base/index");
class SmartlingFilesApi extends index_1.SmartlingBaseApi {
    constructor(smartlingApiBaseUrl, authApi, logger) {
        super(logger);
        this.authApi = authApi;
        this.entrypoint = `${smartlingApiBaseUrl}/files-api/v2/projects`;
    }
    getStatusForAllLocales(projectId, fileUri) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("get", `${this.entrypoint}/${projectId}/file/status`, { fileUri });
        });
    }
    getLastModified(projectId, fileUri) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("get", `${this.entrypoint}/${projectId}/file/last-modified`, { fileUri });
        });
    }
    downloadFile(projectId, fileUri, locale, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("get", `${this.entrypoint}/${projectId}/locales/${locale}/file`, Object.assign(params.export(), { fileUri }), true);
        });
    }
    deleteFile(projectId, fileUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const form = new form_data_1.default();
            form.append("fileUri", fileUri);
            return yield this.makeRequest("post", `${this.entrypoint}/${projectId}/file/delete`, form, false, SmartlingFilesApi.fixContentTypeHeaderCase(form));
        });
    }
    uploadFile(projectId, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const formData = new form_data_1.default();
            const exported = parameters.export();
            Object.keys(exported).forEach((key) => {
                formData.append(key, exported[key]);
            });
            return yield this.makeRequest("post", `${this.entrypoint}/${projectId}/file`, formData, false, SmartlingFilesApi.fixContentTypeHeaderCase(formData));
        });
    }
    static fixContentTypeHeaderCase(form) {
        const headers = form.getHeaders();
        headers["Content-Type"] = headers["content-type"];
        delete headers["content-type"];
        return headers;
    }
}
exports.SmartlingFilesApi = SmartlingFilesApi;
//# sourceMappingURL=index.js.map