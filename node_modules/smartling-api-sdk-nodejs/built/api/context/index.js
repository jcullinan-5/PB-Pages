"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartlingContextApi = void 0;
const string_to_file_stream_1 = __importDefault(require("string-to-file-stream"));
const form_data_1 = __importDefault(require("form-data"));
const index_1 = require("../base/index");
class SmartlingContextApi extends index_1.SmartlingBaseApi {
    constructor(smartlingApiBaseUrl, authApi, logger) {
        super(logger);
        this.authApi = authApi;
        this.entrypoint = `${smartlingApiBaseUrl}/context-api/v2/projects`;
    }
    upload(projectId, params, contextSource) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("post", `${this.entrypoint}/${projectId}/contexts`, params.export(), false, {
                "X-SL-Context-Source": contextSource ? `group=${contextSource.group};name=${contextSource.name};version=${contextSource.version}` : ""
            });
        });
    }
    delete(projectId, contextUid) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("delete", `${this.entrypoint}/${projectId}/contexts/${contextUid}`);
        });
    }
    listContexts(projectId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("get", `${this.entrypoint}/${projectId}/contexts`, params.export());
        });
    }
    runAutomaticMatch(projectId, contextUid, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("post", `${this.entrypoint}/${projectId}/contexts/${contextUid}/match/async`, JSON.stringify(params.export()));
        });
    }
    createStringsToContextBindings(projectId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.makeRequest("post", `${this.entrypoint}/${projectId}/bindings`, JSON.stringify(params.export()));
        });
    }
    alterRequestData(uri, opts) {
        if (uri.match(/context-api\/v2\/projects\/.*\/contexts$/g)) {
            if (!opts.body) {
                return opts;
            }
            const formData = new form_data_1.default();
            Object.keys(opts.body).forEach((key) => {
                if (key === "content") {
                    formData.append(key, (0, string_to_file_stream_1.default)(opts.body[key]));
                }
                else if (Array.isArray(opts.body[key])) {
                    opts.body[key].forEach((value) => {
                        formData.append(`${key}[]`, value);
                    });
                }
                else {
                    formData.append(key, opts.body[key]);
                }
            });
            opts.headers["Content-Type"] = formData.getHeaders()["content-type"];
            opts.body = formData;
        }
        return opts;
    }
}
exports.SmartlingContextApi = SmartlingContextApi;
//# sourceMappingURL=index.js.map