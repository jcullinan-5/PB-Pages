import { readFileSync as h } from "node:fs";
import { createRequire as v } from "node:module";
import B from "@rollup/plugin-inject";
import y from "node-stdlib-browser";
import { handleCircularDependancyWarning as P } from "node-stdlib-browser/helpers/rollup/plugin";
import S from "node-stdlib-browser/helpers/esbuild/plugin";
const a = (e) => e ? e === !0 ? !0 : e === "build" : !1, u = (e) => e ? e === !0 ? !0 : e === "dev" : !1, $ = (e) => e.startsWith("node:"), w = (e = {}) => {
  const f = v(import.meta.url), s = f.resolve("vite-plugin-node-polyfills/shims"), g = f.resolve("vite-plugin-node-polyfills/shims/banner"), c = h(g, "utf-8"), r = {
    exclude: [],
    protocolImports: !0,
    ...e,
    globals: {
      Buffer: !0,
      global: !0,
      process: !0,
      ...e.globals
    }
  }, d = (t) => r.exclude.some((n) => t === n || t === `node:${n}`), m = (t) => {
    if (u(r.globals.Buffer) && /^(?:node:)?buffer$/.test(t))
      return f.resolve("buffer-polyfill");
  };
  return {
    name: "vite-plugin-node-polyfills",
    config: (t, n) => {
      const i = n.mode === "development", b = Object.entries(y).reduce((l, [o, p]) => (!r.protocolImports && $(o) || d(o) || (l[o] = m(o) || p), l), {});
      return {
        build: {
          rollupOptions: {
            onwarn: (l, o) => {
              P(l, o);
            },
            plugins: [
              {
                ...B({
                  // https://github.com/niksy/node-stdlib-browser/blob/3e7cd7f3d115ac5c4593b550e7d8c4a82a0d4ac4/README.md#vite
                  ...a(r.globals.Buffer) ? { Buffer: [s, "Buffer"] } : {},
                  ...a(r.globals.global) ? { global: [s, "global"] } : {},
                  ...a(r.globals.process) ? { process: [s, "process"] } : {}
                })
              }
            ]
          }
        },
        esbuild: {
          // In dev, the global polyfills need to be injected as a banner in order for isolated scripts (such as Vue SFCs) to have access to them.
          banner: i ? c : void 0
        },
        optimizeDeps: {
          esbuildOptions: {
            banner: i ? { js: c } : void 0,
            // https://github.com/niksy/node-stdlib-browser/blob/3e7cd7f3d115ac5c4593b550e7d8c4a82a0d4ac4/README.md?plain=1#L203-L209
            define: {
              ...i && u(r.globals.Buffer) ? { Buffer: "Buffer" } : {},
              ...i && u(r.globals.global) ? { global: "global" } : {},
              ...i && u(r.globals.process) ? { process: "process" } : {}
            },
            inject: [
              s
            ],
            plugins: [
              S(b),
              // Supress the 'injected path "..." cannot be marked as external' error in Vite 4 (emitted by esbuild).
              // https://github.com/evanw/esbuild/blob/edede3c49ad6adddc6ea5b3c78c6ea7507e03020/internal/bundler/bundler.go#L1469
              {
                name: "vite-plugin-node-polyfills-shims-resolver",
                setup(l) {
                  const o = s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), p = new RegExp(`^${o}$`);
                  l.onResolve({ filter: p }, () => ({
                    // https://github.com/evanw/esbuild/blob/edede3c49ad6adddc6ea5b3c78c6ea7507e03020/internal/bundler/bundler.go#L1468
                    external: !1,
                    path: s
                  }));
                }
              }
            ]
          }
        },
        resolve: {
          // https://github.com/niksy/node-stdlib-browser/blob/3e7cd7f3d115ac5c4593b550e7d8c4a82a0d4ac4/README.md?plain=1#L150
          alias: {
            ...b
          }
        }
      };
    }
  };
};
export {
  w as nodePolyfills
};
//# sourceMappingURL=index.js.map
