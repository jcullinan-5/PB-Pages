import {
  getLocalDataManifest
} from "../ssr/getLocalData.js";
import index from "../public/index.js";
import {
  devServerPort,
  dynamicModeInfoText,
  localDevUrlInfoText,
  localDevUrlHelpText,
  generateTestDataWarningText,
  localModeInfoText,
  noLocalDataErrorText
} from "./constants.js";
import { getTemplateFilepathsFromProjectStructure } from "../../../common/src/template/internal/getTemplateFilepaths.js";
const indexPage = ({
  vite,
  dynamicGenerateData,
  displayGenerateTestDataWarning,
  useProdURLs,
  projectStructure
}) => async (_req, res, next) => {
  try {
    const templateFilepaths = getTemplateFilepathsFromProjectStructure(projectStructure);
    const localDataManifest = await getLocalDataManifest(
      vite,
      templateFilepaths
    );
    let indexPageHtml = index.replace(
      `<!--info-html-->`,
      `<div class="info">
          <i class="fa fa-info-circle"></i>
          ${getInfoMessage(dynamicGenerateData, useProdURLs)}
        </div>`
    );
    if (localDataManifest.static.length + localDataManifest.entity.size) {
      if (localDataManifest.static.length) {
        indexPageHtml = indexPageHtml.replace(
          `<!--static-pages-html-->`,
          `<div class="section-title">Static Pages</div>
          <div class="list">
          ${createStaticPageListItems(localDataManifest)}
          </div>
          `
        );
      }
      if (Array.from(localDataManifest.entity.keys()).length) {
        indexPageHtml = indexPageHtml.replace(
          `<!--entity-pages-html-->`,
          `<div class="section-title">Entity Pages</div>
            <div class="list">
          ${Array.from(localDataManifest.entity.keys()).reduce(
            (templateAccumulator, templateName) => templateAccumulator + `<div class="list-title">
                    <span class="list-title-templateName">${templateName}</span>
                    Pages (${(localDataManifest.entity.get(templateName)?.filter((d) => !useProdURLs || d.slug) || []).length}):
                  </div>
                  <ul>${createEntityPageListItems(
              localDataManifest,
              templateName,
              useProdURLs
            )}</ul>`,
            ""
          )}
          </div>`
        );
      }
    } else {
      indexPageHtml = indexPageHtml.replace(
        `<!--error-html-->`,
        `<div class="error">
           <i class="fa fa-times-circle"></i>
             ${noLocalDataErrorText}
          </div>`
      );
    }
    if (displayGenerateTestDataWarning) {
      indexPageHtml = indexPageHtml.replace(
        `<!--warning-html-->`,
        `<div class="warning">
          <i class="fa fa-warning"></i>
          ${generateTestDataWarningText} 
        </div>`
      );
    }
    res.status(200).set({ "Content-Type": "text/html" }).end(indexPageHtml);
  } catch (e) {
    next(e);
  }
};
const createStaticPageListItems = (localDataManifest) => {
  return Array.from(localDataManifest.static).reduce(
    (templateAccumulator, { featureName, staticURL }) => templateAccumulator + `<div class="list-title"> <span class="list-title-templateName">${featureName}</span> Pages (1):</div>
    <ul>
      <li>
        <a href="http://localhost:${devServerPort}/${encodeURIComponent(
      staticURL
    )}">
          ${staticURL}
        </a>
      </li>
    </ul>`,
    ""
  );
};
const createEntityPageListItems = (localDataManifest, templateName, useProdURLs) => {
  const formatLink = (entityId, slug) => {
    if (useProdURLs) {
      return `http://localhost:${devServerPort}/${slug}`;
    }
    return `http://localhost:${devServerPort}/${encodeURIComponent(
      templateName
    )}/${entityId}`;
  };
  const formatDisplayValue = (entityId, slug) => {
    if (!slug) {
      return entityId;
    }
    return `${slug} (${entityId})`;
  };
  const entities = localDataManifest.entity.get(templateName) || [];
  return entities.reduce((entityAccumulator, { entityId, slug }) => {
    if (useProdURLs && !slug) {
      console.error(
        `No document.slug found for entityId "${entityId}", no link will be rendered in the index page.`
      );
      return entityAccumulator;
    }
    return entityAccumulator + `<li>
      <a href="${formatLink(entityId, slug)}">
        ${formatDisplayValue(entityId, slug)}
      </a>
    </li>`;
  }, "");
};
const getInfoMessage = (isDynamic, isProdUrl) => {
  if (isDynamic && isProdUrl) {
    return `<ul>
        <li>${dynamicModeInfoText}</li>
        <li>${localDevUrlInfoText}</li>
        <li>${localDevUrlHelpText}</li>
      <ul>`;
  }
  if (isDynamic) {
    return dynamicModeInfoText;
  }
  return localModeInfoText;
};
export {
  indexPage
};
