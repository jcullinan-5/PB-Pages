{"version":3,"file":"index.js","sources":["../src/SchemaWrapper.ts","../src/schemaTypes/BaseSchema.tsx","../src/yextFields/address.tsx","../src/yextFields/photoGallery.tsx","../src/yextFields/people.tsx","../src/yextFields/offers.tsx","../src/schemaTypes/Event.tsx","../src/yextFields/hours.tsx","../src/schemaTypes/LocalBusiness.tsx","../src/yextFields/review.tsx","../src/schemaTypes/Product.tsx","../src/schemaTypes/FAQPage.tsx"],"sourcesContent":["// Main wrapper of all JSON-LD schema that is injected into the head script.\nexport const SchemaWrapper = (json: any) => {\n  return `<script type=\"application/ld+json\">\n  ${JSON.stringify(json)}\n  </script>`;\n};\n","const BaseSchema = (data: any, schemaType: string) => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': schemaType,\n    name: data.document.name,\n  }\n};\n\nexport {\n  BaseSchema,\n};\n","export type Address = {\n  line1: string;\n  city: string;\n  region: string;\n  postalCode: string;\n  countryCode: string;\n};\n\nexport type Location = {\n  name?: string,\n  address?: Address,\n};\n\nexport const Address = (address?: Address) => {\n  return address && {\n    address: {\n      \"@type\": \"PostalAddress\",\n      \"streetAddress\": address.line1,\n      \"addressLocality\": address.city,\n      \"addressRegion\": address.region,\n      \"postalCode\": address.postalCode,\n      \"addressCountry\": address.countryCode,\n    }\n  };\n};\n\nexport const Location = (location?: Location) => {\n  return location && {\n    \"@type\": \"Place\",\n    \"name\": location.name,\n    ...Address(location.address),\n  };\n};\n","export type PhotoGallery = Array<Photo>;\n\ntype Photo = {\n  image: {\n    url: string,\n  }\n};\n\n// takes in a list of yext images and return a list of image urls\nexport const PhotoGallery = (gallery?: PhotoGallery) => {\n  if (gallery == null) {\n    return {}\n  }\n\n  let imageArray = new Array<string>();\n\n  for (const photo of gallery) {\n    imageArray.push(photo.image.url)\n  }\n\n  return {\n    image: imageArray\n  };\n};\n\n// takes in a single yext image\nexport const Photo = (photo?: Photo) => {\n  return photo && {\n    image: photo.image.url\n  };\n};\n","export type Performer = Array<string>;\nexport type Organization = {\n  name?: string,\n  url?: string,\n};\n\nexport const Performer = (performers?: Performer) => {\n  return performers && {\n    \"performer\": {\n      \"@type\": \"PerformingGroup\",\n      \"name\": performers.join(\" and \"),\n    },\n  };\n};\n\nexport const Organization = (org?: Organization) => {\n  return org && {\n    \"organizer\": {\n      \"@type\": \"Organization\",\n      \"name\": org.name,\n      \"url\": org.url,\n    }\n  };\n};\n","export type Offer = {\n  url?: string,\n  priceCurrency?: string,\n  price?: string,\n  priceValidUntil?: string,\n  itemCondition?: string,\n  availability?: string,\n};\n\nexport const Offer = (offer?: Offer) => {\n  return offer && {\n    \"offers\": {\n      \"@type\": \"Offer\",\n      \"url\": offer.url,\n      \"priceCurrency\": offer.priceCurrency,\n      \"price\": offer.price,\n      \"priceValidUntil\": offer.priceValidUntil,\n      \"itemCondition\": offer.itemCondition,\n      \"availability\": offer.availability,\n    }\n  };\n};\n","import { BaseSchema } from './BaseSchema';\nimport { Location } from '../yextFields/address';\nimport { PhotoGallery } from '../yextFields/photoGallery';\nimport { Performer, Organization } from '../yextFields/people';\nimport { Offer } from '../yextFields/offers';\n\n// https://schema.org/Event\n// Make sure to double check if the fields are correct for your site\nconst Event = (data: any, schemaType?: string) => {\n  return {\n    ...BaseSchema(data, schemaType ?? \"Event\"),\n    ...PhotoGallery(data.document.photoGallery),\n    ...Location({\n      name: data.document.geomodifier,\n      address: data.document.address,\n    }),\n    startDate: data.document.c_startDate,\n    endDate: data.document.c_endDate,\n    description: data.document.description,\n    eventAttendanceMode: data.document.attendance,\n    eventStatus: data.document.eventStatus,\n    ...Performer(data.document.performers),\n    ...Organization({\n      name: data.document.organizerName,\n    }),\n    ...Offer({\n      url: \"\",\n      priceCurrency: data.document.c_currency,\n      price: data.document.price,\n      priceValidUntil: data.document.expirationDate,\n      itemCondition: data.document.stockStatus,\n      availability: data.document.availabilityDate,\n    }),\n  }\n}\n\nexport {\n  Event,\n};","export type Hours = {\n  monday: DayHours;\n  tuesday: DayHours;\n  wednesday: DayHours;\n  thursday: DayHours;\n  friday: DayHours;\n  saturday: DayHours;\n  sunday: DayHours;\n};\n\nexport type DayHours = {\n  isClosed: boolean,\n  openIntervals: Array<openInterval>,\n};\n\ntype openInterval = {\n  start: string,\n  end: string,\n};\n\n// example output: [\"Mo-Fr 10:00-19:00\", \"Sa 10:00-22:00\", \"Su 10:00-21:00\"]\n// weekdays are indicated as Mo, Tu, We, Th, Fr, Sa, Su\nexport const OpeningHours = (hours?: Hours) => {\n  if (hours == null || !hours.monday) {\n    return {};\n  }\n\n  let hoursMap = new Map<string, Array<string>>();\n\n  hoursMap = getHoursByDay(hours.monday, hoursMap, \"Mo\")\n  hoursMap = getHoursByDay(hours.tuesday, hoursMap, \"Tu\")\n  hoursMap = getHoursByDay(hours.wednesday, hoursMap, \"We\")\n  hoursMap = getHoursByDay(hours.thursday, hoursMap, \"Th\")\n  hoursMap = getHoursByDay(hours.friday, hoursMap, \"Fr\")\n  hoursMap = getHoursByDay(hours.saturday, hoursMap, \"Sa\")\n  hoursMap = getHoursByDay(hours.sunday, hoursMap, \"Su\")\n\n  let hoursArray = new Array<string>();\n\n  for (const [interval, days] of hoursMap){\n    let daysOfWeek = days.join(\",\")\n    hoursArray.push(daysOfWeek + \" \" + interval)\n  }\n\n  return {\n    openingHours: hoursArray,\n  }\n};\n\nconst getHoursByDay = (hours: DayHours, hoursMap: Map<string, Array<string>>, day: string) => {\n  if (hours.isClosed == true) {\n    let interval = \"00:00-00:00\"\n    let days = hoursMap.get(interval) ?? Array<string>();\n    days.push(day)\n    hoursMap.set(interval, days);\n\n    return hoursMap\n  }\n\n  for (let i = 0; i < hours.openIntervals.length; i++) {\n    let interval = hours.openIntervals[i].start + \"-\" + hours.openIntervals[i].end;\n    let days = hoursMap.get(interval) ?? Array<string>();\n    days.push(day)\n    hoursMap.set(interval, days);\n  }\n\n  return hoursMap\n};\n","import { BaseSchema } from './BaseSchema';\nimport { Address } from '../yextFields/address';\nimport { OpeningHours } from '../yextFields/hours';\nimport { PhotoGallery } from '../yextFields/photoGallery';\n\n// LocalBusiness includes sub-LocalBusiness schema types, including:\n// FinancialService, TravelAgency, GovernmentOffice, ShoppingCenter, MedicalBusiness etc\n// pass different variables to the schemaType param if neededed\n// more sub-types see https://schema.org/LocalBusiness\nconst LocalBusiness = (data: any, schemaType?: string) => {\n  return {\n    ...BaseSchema(data, schemaType ?? \"LocalBusiness\"), // default, if schemaType is nil, set to LocalBusiness\n    ...Address(data.document.address),\n    ...OpeningHours(data.document.hours),\n    ...PhotoGallery(data.document.photoGallery),\n    description: data.document.description,\n    telephone: data.document.mainPhone,\n    email: data.document.email,\n  }\n};\n\nexport {\n  LocalBusiness,\n};","export type Review = {\n  ratingValue?: string,\n  bestRating?: string,\n  author?: string,\n};\n\nexport type AggregateRating = {\n  ratingValue?: string,\n  reviewCount?: string,\n};\n\nexport const Review = (review?: Review) => {\n  return review && {\n    \"review\": {\n      \"@type\": \"Review\",\n      \"reviewRating\": {\n        \"@type\": \"Rating\",\n        \"ratingValue\": review.ratingValue,\n        \"bestRating\": review.bestRating,\n      },\n      \"author\": {\n        \"@type\": \"Person\",\n        \"name\": review.author,\n      }\n    }\n  };\n};\n\nexport const AggregateRating = (rating?: AggregateRating) => {\n  return rating && {\n    \"aggregateRating\": {\n      \"@type\": \"AggregateRating\",\n      \"ratingValue\": rating.ratingValue,\n      \"reviewCount\": rating.reviewCount,\n    },\n  };\n};\n","import { BaseSchema } from './BaseSchema';\nimport { PhotoGallery } from '../yextFields/photoGallery';\nimport { Review, AggregateRating } from '../yextFields/review';\nimport { Offer } from '../yextFields/offers';\n\n// https://schema.org/Product\n// Make sure to double check if the fields are correct for your site\nconst Product = (data: any, schemaType?: string) => {\n  return {\n    ...BaseSchema(data, schemaType ?? \"Product\"),\n    ...PhotoGallery(data.document.photoGallery),\n    ...Review(data.document.c_reviews),\n    ...AggregateRating(data.document.c_aggregateRating),\n    ...Offer({\n      url: \"\",\n      priceCurrency: data.document.c_currency,\n      price: data.document.price,\n      priceValidUntil: data.document.expirationDate,\n      itemCondition: data.document.stockStatus,\n      availability: data.document.availabilityDate,\n    }),\n    description: data.document.description,\n    sku: data.document.sku,\n    mpn: data.document.mpn,\n    brand: {\n      \"@type\": \"Brand\",\n      \"name\": data.document.brand,\n    },\n  }\n};\n\nexport {\n  Product,\n};\n","type RTF2 = {\n  json?: object;\n}\n\ntype FAQ = {\n  question: string;\n  answer: string | RTF2;\n}\n\nfunction getTextNodesFromJson(rtfObject: object, textNodes: string[]) {\n  for (let key in rtfObject) {\n    if (typeof rtfObject[key] === 'object') {\n      if (Array.isArray(rtfObject[key])) {\n        // loop through array\n        for (let i = 0; i < rtfObject[key].length; i++) {\n          getTextNodesFromJson(rtfObject[key][i], textNodes);\n        }\n      } else {\n        // call function recursively for object\n        getTextNodesFromJson(rtfObject[key], textNodes);\n      }\n    } else {\n      if (key == 'text') {\n        // store all text nodes in an array\n        textNodes.push(rtfObject[key]);\n      }\n    }\n  }\n}\n\nfunction getRichTextContent(answer: RTF2) {\n  if (answer.json) {\n    const textNodes: string[] = [];\n    getTextNodesFromJson(answer.json, textNodes);\n    return textNodes.join('');\n  }\n  return '';\n}\n\n// https://schema.org/FAQPage\nconst FAQPage = (data: FAQ[]) => {\n  return {\n    '@context': 'http://www.schema.org',\n    '@type': 'FAQPage',\n    'mainEntity': data.map(faq => ({\n      '@type': 'Question',\n      name: faq.question,\n      acceptedAnswer: {\n        '@type': 'Answer',\n        'text': (typeof faq.answer == 'string') ? faq.answer : getRichTextContent(faq.answer),\n      }\n    }))\n  }\n}\n\nexport {\n  FAQPage,\n};\n"],"names":["__spreadValues","__spreadProps"],"mappings":"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"}